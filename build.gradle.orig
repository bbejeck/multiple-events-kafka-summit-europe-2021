buildscript {
    repositories {
        mavenCentral()
        maven {
            url = uri("https://packages.confluent.io/maven/")
        }
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
        maven {
            url = uri("https://jitpack.io")
        }
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id "com.google.protobuf" version "0.8.15"
    id "com.github.imflog.kafka-schema-registry-gradle-plugin" version "1.1.1"
    id "com.github.davidmc24.gradle.plugin.avro" version "1.0.0"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
    maven {
        url = uri("https://packages.confluent.io/maven/")
    }

    maven {
        url = uri("https://jitpack.io")
    }
}

dependencies {
    implementation 'com.google.protobuf:protobuf-java:3.15.3'
    implementation "org.apache.avro:avro:1.10.0"
    
    implementation "org.apache.logging.log4j:log4j-api:2.7"
    implementation "org.apache.logging.log4j:log4j-core:2.7"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:2.7"

    implementation 'org.apache.kafka:kafka-streams:2.7.0'
    implementation 'io.confluent:kafka-streams-avro-serde:6.1.0'
    implementation 'io.confluent:kafka-streams-protobuf-serde:6.1.0'

    implementation "io.confluent:kafka-avro-serializer:6.1.0"
    implementation "io.confluent:kafka-protobuf-serializer:6.1.0"
    implementation "io.confluent:kafka-protobuf-provider:6.1.0"
}

protobuf {
    generatedFilesBaseDir = "${project.buildDir}/generated-main-proto-java"

    protoc {
        artifact = 'com.google.protobuf:protoc:3.15.3'
    }
}

schemaRegistry {
    // set the url to schema.registry.url property
    url = ''

    credentials {
        // username is the characters up to the ':' in the basic.auth.user.info property
        username = ''
        // password is everything after ':' in the basic.auth.user.info property
        password = ''
    }


    // Possible types are ["JSON", "PROTOBUF", "AVRO"]
    register {
        subject('page-view', 'src/main/avro/page_view.avsc', 'AVRO')
        subject('purchase', 'src/main/avro/purchase.avsc', 'AVRO')
        subject('avro-events-value', 'src/main/avro/all_events.avsc', 'AVRO')
                .addReference("io.confluent.developer.avro.PageView", "page-view", 1)
                .addReference("io.confluent.developer.avro.Purchase", "purchase", 1)
    }

}

task createTopics(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'io.confluent.developer.utils.Topics'
    args 'src/main/resources/config.properties'
}

task runProducer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'io.confluent.developer.clients.DataProducer'
    args  'src/main/resources/config.properties'
}

task runKafkaStreamsExample(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'io.confluent.developer.streams.MultiEventKafkaStreamsExample'
    args  'src/main/resources/config.properties'
}

task runConsumer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'io.confluent.developer.clients.MultiEventConsumer'
    args  'src/main/resources/config.properties'
}


